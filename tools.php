<?php
namespace Softpharma;

class tools {
  protected $cwd;
  public $config;
  public $query_result;
  public $cron_difference;

  /**
   * Loads the config.ini.
   */
  public function __construct() {
	$cwd = pathinfo(__DIR__);
	$this->cwd = $cwd = $cwd['dirname'] . DIRECTORY_SEPARATOR . $cwd['basename'];
	$config_file = $cwd . DIRECTORY_SEPARATOR . "config.ini";
	$this->config = $config = parse_ini_file($config_file, TRUE);

	$nx_wsclient_root_folder = $config['nx_wsclient']['root_folder'];
	$nx_wsclient_autoload_file = $nx_wsclient_root_folder . DIRECTORY_SEPARATOR . $config['nx_wsclient']['autoload_file'];

	if (file_exists($nx_wsclient_autoload_file)) {
	  include_once $nx_wsclient_autoload_file;
	}
  }

  /**
   * Loads the product's query result txt file generated by SoftPharma.
   */
  public function query_product() {

	if (file_exists($this->config["softpharma_product"]['query_result_file'])) {
	  $field_id = $this->config["softpharma_product"]['field_id'];
	  $table_fields = $this->config["softpharma_product"]['fields'];

	  $query = file_get_contents($this->config["softpharma_product"]['query_result_file']);
	  // Make sure there are no EOLs in it.
	  $query = str_replace("\n", "", $query);
	  $query = str_replace("\r", "", $query);
	  // Create an array of product rows.
	  $query = explode("),(", $query);

	  $result = array();
	  foreach($query as $row) {
		// Create an array of fields.
		$row = str_replace("',", ',', $row);
		$row = explode(",'", $row);

		foreach($row as $table_field_name => $table_field_value) {
		  $table_field_value = utf8_encode($table_field_value);
		  if (isset($table_fields[$table_field_name])) {
			$nx_table_field_name = $table_fields[$table_field_name];
			$field_id_value = $row[$field_id];
			// Clean up.
			$table_field_value = str_replace("')", '', $table_field_value);
			$table_field_value = str_replace("'", '', $table_field_value);
  
			if (!empty($result[$field_id_value][$nx_table_field_name])) {
			  $result[$field_id_value][$nx_table_field_name] .= " | $table_field_value";
			}
			else {
			  $result[$field_id_value][$nx_table_field_name] = $table_field_value;
			}
		  }
		}
	  }
	  $this->query_result = $result;
	}
	else {
	  print "SEND AN EMAIL\n";
	}
  }

  /**
   * Converts the query_result property value to json and saves it into a file
   * located in the tmp folder.
   *
   * @param String $file_name
   *   The name of the file to be saved in the tmp folder.
   */
  public function store_query_result($file_name) {
	$cwd = $this->cwd;
	$tmp_folder = $cwd . DIRECTORY_SEPARATOR . 'tmp';
	$tmp_file_path = $tmp_folder . DIRECTORY_SEPARATOR . $file_name;

	$file_content = json_encode($this->query_result);

	if (!file_exists($tmp_folder)) {
	  mkdir($tmp_folder, 0777, true);
	}
	file_put_contents($tmp_file_path, $file_content);
  }

  /**
   * Search for differences between last cron result and current cron
   * result. If any difference is found then it is saved to
   * cron_difference property.
   *
   * @param String $last_cron_file_name
   *   The file name containing last cron content.
   */
  public function compare_last_cron_result($last_cron_file_name) {
	$cwd = $this->cwd;
	$tmp_folder = $cwd . DIRECTORY_SEPARATOR . 'tmp';
	$tmp_file_path = $tmp_folder . DIRECTORY_SEPARATOR . $last_cron_file_name;
	$content_last_cron = array();
	$content_current_cron = $this->query_result;
	$content_difference = array();

	//unset($content_current_cron[37]);

	if (file_exists($tmp_file_path)) {
	  $content_last_cron = (array) json_decode(file_get_contents($tmp_file_path), TRUE);
	}

	foreach($content_current_cron as $content_id => $content_row) {
	  // New content.
	  if (!array_key_exists($content_id, $content_last_cron)) {
		$content_difference[$content_id] = $content_row;
	  }
	  else {
		// Content update.
		$diff = array_diff($content_current_cron[$content_id], $content_last_cron[$content_id]);
		if (!empty($diff)) {
		  $content_difference[$content_id] = $content_row;
		}
	  }
	}

	// Content deleted.
	$rows_deleted = array_diff_key($content_last_cron, $content_current_cron);
	if (!empty($rows_deleted)) {
	  foreach($rows_deleted as $content_id => $content_row) {
		$content_difference['deleted'][$content_id] = $content_row;
	  }
	}

	$this->cron_difference = $content_difference;
  }
}
